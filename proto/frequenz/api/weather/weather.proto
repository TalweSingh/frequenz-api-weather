// Frequenz Weather & Forecast API
//
// Copyright:
// Copyright 2023 Frequenz Energy-as-a-Service GmbH
//
// License:
// MIT

syntax = "proto3";

package frequenz.api.weatherforecast.v1;

import "frequenz/api/common/location.proto";
import "google/protobuf/timestamp.proto";


// Service provides operations related to retrieving weather forecasts for
// locations. 
//
// The forecasts are updated regularly, and the service will stream the latest
// available data unless a specific time range is requested.
// !!! note
//     Weather forecasts are inherently uncertain and actual conditions may
//     vary. Use the data responsibly.
service WeatherForecastService {
  // Returns historical weather forecast features for a geo location for a
  // specified time range.
  rpc GetHistoricalWeatherForecast (ForecastRequest)
    returns (ForecastResponse);

  // Streams live weather forecast features for a geo location as they become
  // available. Initially, the most recent forecast will be streamed.
  rpc StreamLiveWeatherForecast (ForecastRequest)
    returns (stream ForecastResponse);
}


// Weather features (e.g. wind speeds or solar radiation) available for query
// through the API. 
enum ForecastFeature {
  // Default value. When used, the API responds with all features listed below.
  FORECAST_FEATURE_UNSPECIFIED = 0;

  // Eastward component of the wind at 100 m altitude. It is the horizontal
  // speed of air moving towards the east, at a height of 100 metres above the
  // surface of the Earth.
  // A positive value indicates eastward wind, and a negative value indicates
  // westward wind. Typical range is -20 to 20 m/s.
  // Measured in m/s.
  FORECAST_FEATURE_U_WIND_COMPONENT_100_METRE = 1;

  // Northward component wind at 100 m altitude. It is the horizontal speed of
  // air moving towards the north, at a height of 100 metres above the surface
  // of the Earth.
  // A positive value indicates northward wind, and a negative value indicates
  // southward wind. Typical range is -20 to 20 m/s.
  // Measured in m/s.
  FORECAST_FEATURE_V_WIND_COMPONENT_100_METRE = 2;

  // Amount of solar radiation (shortwave radiation, direct and diffused) that
  // reaches a horizontal plane at the surface of the Earth.
  // Measured in W/m².
  FORECAST_FEATURE_SURFACE_SOLAR_RADIATION_DOWNWARDS = 3;

  // Amount of solar radiation (shortwave radiation, direct and diffused) that
  // reaches a horizontal plane at the surface of the Earth minus the amount
  // reflected by the Earth's surface (which is governed by the albedo).
  // Measured in W/m².
  FORECAST_FEATURE_SURFACE_NET_SOLAR_RADIATION = 4;
}

// The ForecastRequest message is used to specify the parameters for the
// SubscribeWeatherForecast method. It allows users to request weather forecasts
// for a specific location and time period, with specified features. 
message ForecastRequest {
  // The location for which the forecast is being requested.
  frequenz.api.common.location.Location location = 1;

  // List of required features.  If none are specified, all available features
  // will be streamed.
  repeated ForecastFeature features = 2;

  // Optional for StreamLiveWeatherForecast, ignored if provided.
  // The start of the period for which the forecast is being requested.
  google.protobuf.Timestamp start_ts = 3;

  // Optional for StreamLiveWeatherForecast, ignored if provided.
  // The end of the period for which the forecast is being requested.
  google.protobuf.Timestamp end_ts = 4;

  // Specifies the maximum number of forecasts to be returned in a single
  // response.
  int32 page_size = 5;
}

// The ForecastResponse message encapsulates the weather forecast data returned
// by the SubscribeWeatherForecast method. It provides a structured format for
// representing forecast data for a specific location, including timestamps
// for validity and creation.
message ForecastResponse {

  // Holds all weather features forecast for a certain point in time.
  message Forecasts {

    // Holds the forecast for a single weather feature.
    message FeatureForecast {
      ForecastFeature feature = 1;

      // Value of the feature. Unit depends on the feature (e.g., m/s for wind 
      // speed, W/m² for radiation). Details can be found in the
      // ForecastFeature enum under each feature.
      float value = 2;
    }

    // The timestamp for which the features in this entry are valid for.
    google.protobuf.Timestamp valid_at_ts = 1;

    // All requested weather features.
    repeated FeatureForecast features = 2;
  }

  // Weather forecasts.
  repeated Forecasts forecasts = 1;

  // The location for which the weather data is returned.
  frequenz.api.common.location.Location location = 2;

  // The timestamp indicating when the forecast was originally created. 
  google.protobuf.Timestamp creation_ts = 3;
}
